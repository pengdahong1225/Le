https://www.bilibili.com/video/BV1xb411e7ww?from=search&seid=10597410702860718788&spm_id_from=333.337.0.0
动态规划题目（拿到题目先判断）
{
	1.计数
	2.求最值
	3.求存在性
}
步骤
{
	1.确定状态
	{
		一般解动态规划的时候需要开一个数组dp，dp[i]就是状态，第一件事就是确定dp[i]所代表什么？
		*一般求什么就代表什么*（确定状态需要两个意识：A最后一步:找到最优策略中的最后一个步骤，
		剩下的也要最优。(k,n-k)	B子问题:将原问题转化成子问题）

		设状态:f(x) = 最少用多少枚硬币拼出X
		所以:f(27) = min{f(27-2)+1,f(27-5)+1,f(27-7)+1}
	}
	2.转移方程
	{
		状态转移方程的关键在于找到f(n)和f(n-1),f(n-2)..的关系
		设状态:f(x) = 最少用多少枚硬币拼出X，对于任意的X,f(X) = min{f(X-2)+1,f(X-5)+1,f(X-7)+1}
	}
	3.初始条件和边界情况
	{
		初始 dp[0]=0;(定义dp的时候要明确dp的作用，才能给对应的初始条件)
	}
	4.计算顺序
	{
		当要计算f[x]时，f[x-i]已经计算得到结果了，采用从小到大的计算顺序。
	}
}
普遍来看，求最值 的问题一般都具有「重叠子问题」和「最优子结构」特点，因此此类问题往往适合用动态规划解决。
动态规划->转态转移->状态转移方程
斐波那契数列(重叠子)
{
	暴力递归 记忆化递归 （顶至底）
	动态规划	（底至顶）
}
蛋糕最高售价(最优子结构)
{
	暴力递归 记忆化递归 （顶至底）
	动态规划	（底至顶）

	重量为 nn 的蛋糕的总售价可切分为 nn 种组合

	暴力递归
	// 输入蛋糕价格列表 priceList ，求重量为 n 蛋糕的最高售价
	int maxCakePrice(int n, vector<int> priceList) 
	{
	    if (n <= 1) return priceList[n]; // 蛋糕重量 <= 1 时直接返回
	    int f_n = 0;
	    for (int i = 0; i < n; i++)      // 从 n 种组合种选择最高售价的组合作为 f(n)
	        f_n = max(f_n, maxCakePrice(i, priceList) + priceList[n - i]);
	    return f_n;                      // 返回 f(n)
	}
	记忆化递归
	// 输入蛋糕价格列表 priceList ，求重量为 n 蛋糕的最高售价
	int maxCakePrice(int n, vector<int> priceList, vector<int> dp) 
	{
	    if (n <= 1) return priceList[n]; // 蛋糕重量 <= 1 时直接返回
	    int f_n = 0;
	    for (int i = 0; i < n; i++) {    // 从 n 种组合种选择最高售价的组合作为 f(n)
	        int f_i = dp[i] != 0 ? dp[i] : maxCakePrice(i, priceList, dp);
	        f_n = max(f_n, f_i + priceList[n - i]);
	    }
	    dp[n] = f_n;                     // 记录 f(n) 至 dp 数组
	    return f_n;                      // 返回 f(n)
	}

	int maxCakePriceMemorized(int n, vector<int> priceList) 
	{
	    vector<int> dp(n + 1, 0);
	    return maxCakePrice(n, priceList, dp);
	}
}
